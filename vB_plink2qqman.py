#!/usr/bin/env python3
"""
convert PLINK resultant .adjusted file to
convinient form for the R package qqman

[usage]
>./plink2qqman.py [.adjuested]

[OUTPUT]
*.qqman.txt

[OPTIONS]
-th: threshold for p-value, SNPs with p-val more than this value will be discarded
     [default: 0.1]
-flmm: Turn on the fast-lmm mode, claim this option if your input data from Fast-lmm
     [default: off]]
-blup: Trun on the rrBLUP mode, claim this option when you want to process the rrBLUP output
     (also contains FDR data)
     [default: off]
-ld  : Add *.ld file generated by PLINK focused on a particualr SNP, using --ld-snp option [default: off]
      The file name is recommaned to end with the SNP identifier, which will be retained to the output file name
     [Example options to run PLINK ver. 1.90b]
      --allow-no-sex
      --file AT.E180plus.2nd.LD
      --ld-snp 3:15132804:C:T
      --ld-window 99999
      --ld-window-kb 2000
      --ld-window-r2 0.1
      --maf 0.05
      --out AT.E180.LD.3-15132804
      --r2
      --threads 10


Nov.3rd 2015
Junesk9

======= Change log
FEB25th 2016	Add "blup" options to manipulate rrBLUP GWAS() result file contain multiple results
FEB13th 2016	Add "ld" options to extract LD for particular SNP (substitute to vA_plink2highlight.py)
DEC16th 2015	Add "flmm" to also accept Fast-lmm output file

"""


import sys
import math

######################## Arguments
args = sys.argv[1:]

if len(args) == 0:
	print(__doc__)
	sys.exit(2)


arg = {"th": 0.1, "flmm": False, "ld": False, "blup": False}
if "-th" in args:
	th_idx = args.index("-th")+1
	arg["th"] = args[th_idx]
if "-ld" in args:
	ld_idx = args.index("-ld")+1
	arg["ld"] = args[ld_idx]
if "-flmm" in args:
	arg["flmm"] = True
	arg["blup"] = False
if "-blup" in args:
	arg["flmm"] = False
	arg["blup"] = True
if "-blup" in args and "-flmm" in args:
	print("[Error] you can claim either -flmm or -blup only!")
	print()
	sys.exit()


th = arg["th"]
ld = arg["ld"]
plink = sys.argv[-1]
flmm_mode = arg["flmm"]
blup_mode = arg["blup"]
prefix = ".".join(plink.split(".")[:-1])
pre_blup = prefix

if ld == False:
    out = prefix +".th"+str(th)+".qqman.txt"
if ld != False:
    prefix2 = ld.split(".")[-2]
    out = prefix +".th"+str(th)+"."+prefix2+".qqman.txt"
print("""

	Convert Plink output to qqman input

	input         : %s
	output        : %s
	Pval threshold: %s [Default: 0.1]
	FasT-lmm mode : %s [Default: False]
	rrBLUP mode   : %s [Default: False]

	LD file mode  : %s [Default: False]

""" % (plink, out, th, flmm_mode, blup_mode, ld) )


plink = open(plink)
plink = [i.strip() for i in plink]

#################### Body


if blup_mode == True:
    header = plink[0].split()
    #print(len(header))
    n = int((len(header) - 3)/2)
    print("[rrBLUP mode] detect %s results" % n)
    for i in range(n):
        #head = header[i+3].split(".")[0] ## Head from phenotype name, sometimes, this makes confusions MAR27th2016
        head = "pheno"+str(i+1)
        prefix = pre_blup+".th"+str(th)+"."+head+".qqman.txt"
        out = open(prefix,"w")
        print("SNP","CHR","BP","P","FDR",sep="\t", file=out)
        idx_P = i+3
        idx_F = idx_P + n
        for line in plink[1:]:
            line = line.split()
            ch = line[1]
            snp = line[0]
            bp = line[2]
            try: ## In some cases, the Pvalue appeares as "NA"
                p = 10**-float(line[idx_P]) ## "^" not supportes float as power
            except ValueError:
                if line[idx_P] == "NA":
                    p = 1
                else:
                    print("[rrBLUP mode] ERROR, unknown P-value: %s" % line[idx_P])
            f = line[idx_F]
            if p <= th:
                print(snp,ch,bp,p,f,sep="\t", file=out)
            else: pass
        out.close()
        print("[rrBLUP mode] Output file %s is generated " % prefix)
    sys.exit()

if ld == False and blup_mode == False:
    out = open(out,"w")
    print("SNP","CHR","BP","P","FDR",sep="\t",file=out)
elif ld != False and blup_mode == False:
    out = open(out,"w")
    print("SNP","CHR","BP","logP","FDR","R2",sep="\t",file=out)
    ld = [i.strip().split() for i in open(ld)][1:]
    snp = ld[0][2]
    ld = {i[5]:i[6] for i in ld}
    print("[LD MODE] Processing LD of %s" % snp)
else: pass

for i in plink[1:]:
    i = i.split()
    if flmm_mode == blup_mode == False: ## for PLINK output
        info = i[1]
        unadj = float(i[2])
        fdr = i[8]
        ch = info.split(":")[0]
        site = info.split(":")[1]
    elif flmm_mode == True:
        info = i[0]
        try:
            unadj = float(i[4])
        except ValueError: ## Still lack of idea why, some output from Fast-lmm contains "Na" or "Nan" of p-/q-value 22ndDEC 2015
            unadj = 1
        fdr = i[5]
        ch = i[1]
        site = i[3]
        if int(site) == 0: ## Some time the linkage distance (cM) used but bp
            site = i[2]
    if ld == False:
        if unadj < float(th): 
            print(info,ch,site,unadj,fdr,sep="\t",file=out)
    elif ld != False:
        #print(info)
        #sys.exit()
        if info in ld.keys():
            logp = -math.log(float(unadj),10)
            print(info,ch,site,logp,fdr,ld[info],sep="\t",file=out)
out.close()
